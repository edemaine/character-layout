"civet coffeeComment coffeeEq coffeeInterpolation solid"
{ onMount, For, Show } from 'solid-js'
{ createStore, reconcile } from 'solid-js/store'
{ createDropzone } from '@soorria/solid-dropzone'
import 'attr-accept'  // workaround solid-dropzone issue

// Prototype is an image that can be instantiated many times
interface Prototype
  name: string
  url: string
  width: number
  height: number
  scale?: number
  file?: Blob

// Mapping from name to Prototype
[prototypes, setPrototypes] := createStore<Record<string, Prototype>> {}

interface Character extends Prototype
  i: number
  x: number
  y: number
  z: number
  flip: boolean
  vflip?: boolean
  blur?: number
  hidden?: boolean

function random(min: number, max: number): number
  min + Math.random() * (max - min)
function randomBool
  Boolean Math.floor 2*Math.random()

function svgPoint(svg: SVGSVGElement, e: PointerEvent, matrix: SVGGraphicsElement | SVGMatrix = svg): SVGPoint
  if matrix.getScreenCTM?
    matrix = matrix.getScreenCTM()!.inverse()
  pt := svg.createSVGPoint()
  pt.x = e.clientX
  pt.y = e.clientY
  pt.matrixTransform (matrix as SVGMatrix)

interface Parameters
  // random layout
  frequency: Record<string,number>
  zMin: number
  blur: boolean
  boxWidth: number
  boxHeight: number
  number: number
  maxHeight: number
  perspective: boolean
  sort: boolean
  flip: boolean
  cover: boolean
  uneven: number
  right: boolean

function randomLayout(params: Parameters): Character[]
  choose := []
  for [name, freq] of Object.entries params.frequency
    // CIVET: want for name, freq in params.frequency
    continue unless name in prototypes
    choose.push name for i of [0...freq]
  return [] unless choose.length
  zMin := params.zMin / 100
  cover: number := +params.cover
  for i of [0...params.number]
    name := choose[Math.floor Math.random() * choose.length]
    prototype := prototypes[name]
    zFrac .= Math.random() ** 3
    z .= zFrac ** 0.5 * (1 - zMin) + zMin
    height .= params.boxHeight * params.maxHeight/100
    height *= z if params.perspective
    width := height * prototype.width / prototype.height
    yMax := params.boxHeight - height + cover * 2*height
    y .=
      if params.perspective
        zFrac * yMax
      else
        Math.random() * yMax
    y -= cover * height
    z = zFrac = y unless params.perspective
    if prototype.scale?  # align bottoms
      y += (1 - prototype.scale) * height
      height *= prototype.scale
    x .= Math.random()
    x **= params.uneven
    x = 1 - x if params.right
    x *= (params.boxWidth - width + cover * 2*width)
    x -= cover * width
    {...prototype, i, x, y, z, width, height,
      flip: randomBool()
      blur: (1-zFrac**0.5) * 0.5
    }

function depthOrdering(chars: Character[]): Character[]
  chars.sort (a, b) => a.z - b.z
  chars[i].i = i for i of [0...chars.length]
  // CIVET: want `for char, i of chars`
  chars

export function App
  [params, setParams] := createStore<Parameters>
    frequency: {}
    zMin: 10
    blur: false
    boxWidth: 400
    boxHeight: 200
    number: 100
    maxHeight: 40
    perspective: true
    sort: true
    flip: false
    cover: false
    uneven: 1
    right: false

  [characters, setCharacters] := createStore<Character[]>([])
  function randomize
    chars .= randomLayout params
    if params.sort
      chars = depthOrdering chars  # resets i too
    setCharacters reconcile chars
  //onMount randomize

  function addPrototype(file: Blob, optionalName?: string): Promise<undefined>
    name := optionalName ?? (file as File).name ??
      throw new Error "addPrototype should be given File or name"
    new Promise (done) =>
      url := URL.createObjectURL file
      img := new Image
      img.onload = =>
        setPrototypes name, {url, file, name, img.width, img.height}
        unless params.frequency[name]?
          setParams 'frequency', name, 1
        done undefined
      img.src = url
    /*
      reader := new FileReader
      reader.onload = =>
        url := reader.result as string
      reader.readAsDataURL file
    */

  fetch 'standing_umbrella.png'
  .then (response) =>
    await addPrototype await response.blob(), 'standing_umbrella.png'
    randomize()

  function inputValue(input: HTMLInputElement)
    switch input.type
      when 'range', 'number'
        input.valueAsNumber
      when 'checkbox'
        input.checked
      else
        input.value
  function onInput(param: keyof Parameters)
    (e: Event) =>
      target := e.currentTarget as HTMLInputElement
      setParams param, (inputValue target) as number | boolean
  function onChange
    randomize()

  drags: Record<number, {
    i: number  // index of character
    dragOrigin: {x: number, y: number}  // pointerdown location
    start: {x: number, y: number}   // original location of
  }> := []
  lastMouse := {x: -1, y: -1}
  function onPointerMove(e: PointerEvent)
    lastMouse.x = e.clientX
    lastMouse.y = e.clientY
    return unless drags[e.pointerId]?
    {i, start, dragOrigin} := drags[e.pointerId]
    dragLocation := svgPoint svg, e
    setCharacters i,
      x: start.x + dragLocation.x - dragOrigin.x
      y: start.y + dragLocation.y - dragOrigin.y
  function onPointerUp(e: PointerEvent)
    delete drags[e.pointerId]

  function toggleFrequency(name: string, e: MouseEvent)
    e.stopPropagation()
    freq .= params.frequency[name]
    if freq
      freq = 0
    else
      freq = 1
    setParams 'frequency', name, freq
    onChange()
  function incrementFrequency(name: string, e: MouseEvent)
    e.preventDefault()
    freq .= params.frequency[name]
    freq++
    setParams 'frequency', name, freq
    onChange()
  function uniformFrequency(freq: number)
    setParams 'frequency', Object.fromEntries(
      for name in prototypes
        [name, freq] as const
    )
    onChange()

  function findCharacter: number | undefined
    elt := document.elementFromPoint lastMouse.x, lastMouse.y
    return unless elt?
    iString := (elt as any)?.dataset?.i as string | undefined
    return unless iString?
    parseInt iString, 10
  onMount =>
    window.addEventListener 'keydown', (e: KeyboardEvent) =>
      switch e.key
        when 'r', 'R'
          randomize()
        when 'd', 'D', 'Delete', 'Backspace'
          i := findCharacter()
          setCharacters i, "hidden", !& if i?
        when 'f', 'F'
          i := findCharacter()
          setCharacters i, "flip", !& if i?
        when 'v', 'V'
          i := findCharacter()
          setCharacters i, "vflip", !& if i?

  function viewBox
    "0 0 #{params.boxWidth} #{params.boxHeight}"
  function writeSVG
    blurs: string[] := []
    out .= svg.outerHTML
    .replace /^<svg/, """
      <?xml version="1.0" encoding="utf-8"?>
      <svg xmlns="http://www.w3.org/2000/svg"
       xmlns:xlink="http://www.w3.org/1999/xlink"

    """
    // Replace blob URLs with local filenames
    .replace /\bhref=(["']).*?\1/g, ''
    .replace /\bdata-i=["']?(\d+)["']?/g, (match, i) =>
      character := characters[parseInt i, 10]
      `xlink:href="${character.name}"`
    // Replace blur filters
    .replace /\bstyle="filter:([^"]*)"/g, (filter) ->
      if blur := filter.match /blur\(([^()]+)px\)/
        blurs.push blur[1]
        "style=\"filter:url(#blur#{blurs.length-1})\""
      else
        console.warn "Unrecognized filter: #{filter}"
        ''
    filters .= ''
    for blurIndex of [0...blurs.length]
      blur := blurs[blurIndex]
      // CIVET: want for blur, blurIndex of blurs
      filters += """
        <filter id="blur#{blurIndex}" x="0" y="0" width="100%" height="100%">
          <feGaussianBlur in="SourceGraphic" stdDeviation="#{blur}"/>
        </filter>

      """
    out = out.replace /<filter/, '\n' + filters + '$&' if filters
    out
  function writeJSON
    JSON.stringify {params, characters}
  function downloadFile(data: string, type: string, filename: string)
    download.download = filename
    url := URL.createObjectURL new Blob [data], {type}
    download.href = url
    download.click()
    download.href = ''
    URL.revokeObjectURL url
  function downloadSVG
    downloadFile writeSVG(), 'image/svg+xml', 'layout.svg'
  function downloadJSON
    downloadFile writeJSON(), 'application/json', 'layout.json'
  function openJSON
    return unless jsonInput.files?.length
    file := new FileReader
    file.onload = =>
      data: {params: Parameters, characters: Character[]} := JSON.parse file.result as string
      setParams data.params  // existing parameters act as defaults
      setCharacters reconcile data.characters
    file.readAsText jsonInput.files[0]
  
  dropzone := createDropzone
    accept: 'image/*'
    onDrop: (files: File[]) =>
      let file: File
      await.allSettled
        for file of files
          continue unless file.type.match /^image\//
          addPrototype file
      randomize()
  function onClick(e: MouseEvent)
    unless (e.target! as HTMLElement).className is in ['prototypes', 'draghere']
      e.stopPropagation()

  let svg: SVGSVGElement, download: HTMLAnchorElement, jsonInput: HTMLInputElement, path: SVGPathElement
  <div ...dropzone.getRootProps({onClick}) classList={drag: dropzone.isDragActive}>
    <table style="width: 100%">
      <tbody>
        <tr>
          <td style="text-align: left; vertical-align: middle">
            <h1>Algorithmic Character Layout
          <td style="text-align: right; vertical-align: middle">
            <h2>by <a href="https://marielbass.com">Mariel&nbsp;Bass</a>, <a href="https://erikdemaine.org">Erik&nbsp;Demaine</a>, and <a href="https://martindemaine.org">Martin&nbsp;Demaine</a>
    <div .prototypes>
      <Show when={Object.keys(prototypes).length} fallback={
        <div .draghere>To construct a layout, first drag your images here, or click to open file selector.
      }>
        <div .draghere>Drag your images here, or click to open file selector.
          {' '}
          <button onClick={(e) => e.stopPropagation(); uniformFrequency 1}>All
          <button onClick={(e) => e.stopPropagation(); uniformFrequency 0}>None
          <button onClick={(e) => e.stopPropagation(); setPrototypes reconcile {}}>Clear
      <input ...dropzone.getInputProps()>
      <For each={Object.values prototypes}>
        (prototype) =>
          <img .prototype
           .{if params.frequency[prototype.name] then 'active'}
           src={prototype.url} height={100 * (prototype.scale ?? 1)}
           title={prototype.name} onClick={[toggleFrequency, prototype.name]}
           onContextMenu={[incrementFrequency, prototype.name]}>
          <span .freq>{params.frequency[prototype.name]}
    <header>
      <label .group>
        {'Characters: '}
        <input type="number" value=params.number onInput={onInput 'number'} {onChange}>
      <label .group>
        {'Dimensions: '}
        <input type="number" value=params.boxWidth onInput={onInput 'boxWidth'} {onChange}>
        &times;
        <input type="number" value=params.boxHeight onInput={onInput 'boxHeight'} {onChange}>
      <label .group>
        <input type="checkbox" checked=params.cover onInput={onInput 'cover'} {onChange}>
        Cover
      <div .group>
        <label>
          {'Unevenness: '}
          <input type="number" value=params.uneven onInput={onInput 'uneven'} {onChange}>
        <label>
          <input type="checkbox" checked=params.right onInput={onInput 'right'} {onChange}>
          Right
      <label .group>
        <input type="checkbox" checked=params.flip onInput={onInput 'flip'}>
        Flip
      <label .group>
        <input type="checkbox" checked=params.blur onInput={onInput 'blur'}>
        Blur
      <br>
      <label .group>
        <input type="checkbox" checked=params.perspective onInput={onInput 'perspective'} {onChange}>
        Perspective
      <label .group>
        <input type="checkbox" checked=params.sort onInput={onInput 'sort'} {onChange}>
        Depth sort
      <label .group>
        {'Max height (camera angle): '}
        <input type="number" value=params.maxHeight onInput={onInput 'maxHeight'} {onChange}>
        <input type="range" value=params.maxHeight onInput={onInput 'maxHeight'} {onChange} list="ticks">
      <label .group>
        {'Min Z: '}
        <input type="number" value=params.zMin onInput={onInput 'zMin'} {onChange}>
        <input type="range" value=params.zMin onInput={onInput 'zMin'} {onChange} list="ticks">
      <br>
      <datalist #ticks>
        <option value=0>
        <option value=25>
        <option value=50>
        <option value=75>
        <option value=100>
      <div .group>
        <button onClick=randomize>Randomize
      <div .group>
        <button onClick=downloadSVG>Download SVG
      <div .group>
        <button onClick=downloadJSON>Download JSON
      <div .group>
        <input ref=jsonInput! type="file" accept=".json"
         style={display: 'none'} onInput=openJSON>
        <button onClick={=> jsonInput.click()}>Open JSON
      <a .d-none ref=download! style={display: 'none'}>
    <svg ref=svg! viewBox=viewBox()
     onPointerMove=onPointerMove onPointerUp=onPointerUp>
      <For each=characters>
        (character) =>
          function onPointerDown(e: PointerEvent)
            drags[e.pointerId] =
              i: character.i
              dragOrigin: svgPoint svg, e
              start: {x: character.x, y: character.y}
            svg.setPointerCapture e.pointerId
          function transform
            let r: number
            {x: characterX, y: characterY} .= character
            boxFlip := params.flip
            characterY = params.boxHeight - characterY if boxFlip
            [
              "translate(#{characterX} #{characterY})"
              "translate(#{character.width/2} 0)"
              if character.flip
                "scale(-1 1)"
              if boxFlip
                "scale(1 -1)"
              if character.vflip
                "translate(0 #{character.height/2}) " +
                "scale(1 -1) " +
                "translate(0 #{-character.height/2})"
              "translate(#{-character.width/2} 0)"
            ]
            .filter Boolean
            .join ' '
          function filter: string | undefined
            filters .= []
            filters.push "blur(#{character.blur}px)" if params.blur and character.blur?
            filters.join ' '
          <image data-i=character.i href=character.url
           width=character.width height=character.height
           transform=transform()
           style={filter: filter(), visibility: if character.hidden then 'hidden'}
           onPointerDown=onPointerDown
          >
    <footer>
      <a href="https://github.com/edemaine/character-layout">Source code on GitHub</a>
      {' | '}
      <a href="https://erikdemaine.org/papers/Characters_BRIDGES2023/">Paper describing the algorithm
      {' | '}
      <a href="https://erikdemaine.org/curved/HangingOut/">Sculpture built from this software
